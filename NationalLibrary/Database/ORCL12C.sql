/*
alter session set "_ORACLE_SCRIPT"=true;  
CREATE USER huy IDENTIFIED BY Password;
GRANT CONNECT TO huy;
GRANT CONNECT, RESOURCE, DBA TO huy;
*/
DROP TABLE LibraryType;
DROP TABLE LibraryTypeAuthor;
DROP TABLE LibraryTypePublisher;
DROP TABLE LibraryTypeEdition;
DROP TABLE LibraryTypeEditor;
DROP TABLE LibraryTypeFormat;
DROP TABLE LibraryTypeLanguage;
DROP TABLE LibraryTypeCategory;
DROP TABLE LibraryTypeCopyright;
DROP TABLE LibraryTypeStatus;
/
CREATE TABLE LibraryType
(
    LibraryTypeID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeTitle NVARCHAR2(100) NOT NULL,
    LibraryTypeSKU NVARCHAR2(20),
    LibraryTypeAuthorID NUMBER(10),
    LibraryTypePrice NUMBER(10, 2),
    LibraryTypePublishDate DATE,
    LibraryTypeISBNCode NVARCHAR2(50),
    LibraryTypePublisherID NUMBER(10),
    LibraryTypeEditionID NUMBER(10),
    LibraryTypeEditorID NUMBER(10),
    LibraryTypeFormatID NUMBER(10),
    LibraryTypeLanguageID NUMBER(10),
    LibraryTypeCategoryID NUMBER(10),
    LibraryTypeCopyrightID NUMBER(10),
    LibraryTypeQuantity NUMBER(10),
    LibraryTypeQuantityBroken NUMBER(10),
    LibraryTypeCreatedDate DATE,
    LibraryTypeModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeID)
);
/
CREATE TABLE LibraryTypePublisher
(
    LibraryTypePublisherID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypePublisherName NVARCHAR2(100),
    LibraryTypePublisherLocation NVARCHAR2(100),
    LibraryTypePublisherCreatedDate DATE,
    LibraryTypePublisherModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypePublisherID)
);
/
CREATE TABLE LibraryTypeEdition
(
    LibraryTypeEditionID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeEditionNumber NVARCHAR2(50),
    LibraryTypeEditionDate DATE,
    LibraryTypeEditionCreatedDate DATE,
    LibraryTypeEditionModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeEditionID)
);
/
CREATE TABLE LibraryTypeEditor
(
	LibraryTypeEditorID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeEditorName NVARCHAR2(100),
    LibraryTypeEditorEmail NVARCHAR2(100),
    LibraryTypeEditorLocation NVARCHAR2(100),
    LibraryTypeEditorCreatedDate DATE,
    LibraryTypeEditorModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeEditorID)
);
/
CREATE TABLE LibraryTypeFormat
(
    LibraryTypeFormatID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeFormatType NVARCHAR2(100),
    LibraryTypeFormatCreatedDate DATE,
    LibraryTypeFormatModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeFormatID)
);
/
CREATE TABLE LibraryTypeLanguage
(
    LibraryTypeLanguageID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeLanguageShortCode NVARCHAR2(100),
    LibraryTypeLanguageLongCode NVARCHAR2(100),
    LibraryTypeLanguageCreatedDate DATE,
    LibraryTypeLanguageModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeLanguageID)
);
/
CREATE TABLE LibraryTypeCategory
(
    LibraryTypeCategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeCategoryName NVARCHAR2(100),
    LibraryTypeCategoryCreatedDate DATE,
    LibraryTypeCategoryModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeCategoryID)
);
/
CREATE TABLE LibraryTypeCopyright
(
    LibraryTypeCopyrightID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeCopyrightName NVARCHAR2(100),
    LibraryTypeCopyrightCreatedDate DATE,
    LibraryTypeCopyrightModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeCopyrightID)
);
/
CREATE TABLE LibraryTypeAuthor
(
    LibraryTypeAuthorID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeAuthorName NVARCHAR2(100),
    LibraryTypeAuthorEmail NVARCHAR2(100),
    LibraryTypeAuthorCountry NVARCHAR2(50),
    LibraryTypeAuthorCreatedDate DATE,
    LibraryTypeAuthorModifiedDate DATE,
    LibraryTypeStatusID NUMBER(2),
    PRIMARY KEY (LibraryTypeAuthorID)
);
/
CREATE TABLE LibraryTypeStatus
(
    LibraryTypeStatusID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    LibraryTypeStatusName NVARCHAR2(20),
    PRIMARY KEY (LibraryTypeStatusID)
);
/
ALTER TABLE LibraryType ADD CONSTRAINT UQ_LibraryType UNIQUE (LibraryTypeTitle, LibraryTypeISBNCode, LibraryTypePublisherID, LibraryTypeEditionID, LibraryTypeFormatID, LibraryTypeLanguageID, LibraryTypeAuthorID) NOVALIDATE;
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeAuthor FOREIGN KEY (LibraryTypeAuthorID) REFERENCES LibraryTypeAuthor(LibraryTypeAuthorID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypePublisher FOREIGN KEY (LibraryTypePublisherID) REFERENCES LibraryTypePublisher(LibraryTypePublisherID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeEdition FOREIGN KEY (LibraryTypeEditionID) REFERENCES LibraryTypeEdition(LibraryTypeEditionID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeEditor FOREIGN KEY (LibraryTypeEditorID) REFERENCES LibraryTypeEditor(LibraryTypeEditorID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeFormat FOREIGN KEY (LibraryTypeFormatID) REFERENCES LibraryTypeFormat(LibraryTypeFormatID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeLanguage FOREIGN KEY (LibraryTypeLanguageID) REFERENCES LibraryTypeLanguage(LibraryTypeLanguageID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeCategory FOREIGN KEY (LibraryTypeCategoryID) REFERENCES LibraryTypeCategory(LibraryTypeCategoryID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeCopyright FOREIGN KEY (LibraryTypeCopyrightID) REFERENCES LibraryTypeCopyright(LibraryTypeCopyrightID);
ALTER TABLE LibraryType ADD CONSTRAINT FK_LibraryType_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeAuthor ADD CONSTRAINT FK_LibraryTypeAuthor_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypePublisher ADD CONSTRAINT FK_LibraryTypePublisher_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeEdition ADD CONSTRAINT FK_LibraryTypeEdition_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeEditor ADD CONSTRAINT FK_LibraryTypeEditor_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeFormat ADD CONSTRAINT FK_LibraryTypeFormat_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeLanguage ADD CONSTRAINT FK_LibraryTypeLanguage_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeCategory ADD CONSTRAINT FK_LibraryTypeCategory_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
ALTER TABLE LibraryTypeCopyright ADD CONSTRAINT FK_LibraryTypeCopyright_LibraryTypeStatus FOREIGN KEY (LibraryTypeStatusID) REFERENCES LibraryTypeStatus(LibraryTypeStatusID);
/
INSERT INTO LibraryTypeStatus (LibraryTypeStatusName) VALUES ('Active');
INSERT INTO LibraryTypeStatus (LibraryTypeStatusName) VALUES ('Inactive');
/
-- Trigger for Publisher --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusPublisher
BEFORE INSERT OR UPDATE ON LibraryTypePublisher
FOR EACH ROW
WHEN ( NEW.LibraryTypePublisherName IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypePublisherCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypePublisherModifiedDate := systimestamp;
END;
/
-- Trigger for Edition --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusEdition
BEFORE INSERT OR UPDATE ON LibraryTypeEdition
FOR EACH ROW
WHEN ( NEW.LibraryTypeEditionNumber IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeEditionCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeEditionModifiedDate := systimestamp;
END;
/
-- Trigger for Editor --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusEditor
BEFORE INSERT OR UPDATE ON LibraryTypeEditor
FOR EACH ROW
WHEN ( NEW.LibraryTypeEditorName IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeEditorCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeEditorModifiedDate := systimestamp;
END;
/
-- Trigger for Format --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusFormat
BEFORE INSERT OR UPDATE ON LibraryTypeFormat
FOR EACH ROW
WHEN ( NEW.LibraryTypeFormatType IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeFormatCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeFormatModifiedDate := systimestamp;
END;
/
-- Trigger for Language --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusLanguage
BEFORE INSERT OR UPDATE ON LibraryTypeLanguage
FOR EACH ROW
WHEN ( NEW.LibraryTypeLanguageShortCode IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeLanguageCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeLanguageModifiedDate := systimestamp;
END;
/
-- Trigger for Category --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusCategory
BEFORE INSERT OR UPDATE ON LibraryTypeCategory
FOR EACH ROW
WHEN ( NEW.LibraryTypeCategoryName IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeCategoryCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeCategoryModifiedDate := systimestamp;
END;
/
-- Trigger for Copyright --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusCopyright
BEFORE INSERT OR UPDATE ON LibraryTypeCopyright
FOR EACH ROW
WHEN ( NEW.LibraryTypeCopyrightName IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeCopyrightCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeCopyrightModifiedDate := systimestamp;
END;
/
-- Trigger for Author --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusAuthor
BEFORE INSERT OR UPDATE ON LibraryTypeAuthor
FOR EACH ROW
WHEN ( NEW.LibraryTypeAuthorName IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeAuthorCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeAuthorModifiedDate := systimestamp;
END;
/
-- Trigger for LibraryType --
CREATE OR REPLACE TRIGGER UpdateDateAndStatusLibraryType
BEFORE INSERT OR UPDATE ON LibraryType
FOR EACH ROW
WHEN ( NEW.LibraryTypeTitle IS NOT NULL )
BEGIN
    IF INSERTING THEN
        :NEW.LibraryTypeQuantityBroken := 0;
        :NEW.LibraryTypeCreatedDate := systimestamp;
        :NEW.LibraryTypeStatusID := 1;
    END IF;
    
    :NEW.LibraryTypeModifiedDate := systimestamp;
END;
/
-- Stored Procedure for Search by Title --
CREATE OR REPLACE PROCEDURE SearchLibraryTypeByTitle (p_title in NVARCHAR2, p_result OUT SYS_REFCURSOR )
AS
BEGIN
    OPEN p_result FOR
        SELECT type.LibraryTypeID,
            type.LibraryTypeTitle,
            type.LibraryTypeSKU,
            author.LibraryTypeAuthorName,
            trunc( type.LibraryTypePrice,3) LibraryTypePrice,
            type.LibraryTypePublishDate,
            type.LibraryTypeISBNCode,
            publisher.LibraryTypePublisherName,
            edition.LibraryTypeEditionNumber,
            editor.LibraryTypeEditorName,
            format.LibraryTypeFormatType,
            language.LibraryTypeLanguageShortCode,
            category.LibraryTypeCategoryName,
            copyright.LibraryTypeCopyrightName,
            type.LibraryTypeQuantity,
            type.LibraryTypeQuantityBroken,
            type.LibraryTypeCreatedDate,
            type.LibraryTypeModifiedDate,
            status.LibraryTypeStatusName
        FROM LibraryType type
        INNER JOIN LibraryTypePublisher publisher ON type.LibraryTypePublisherID = publisher.LibraryTypePublisherID
        INNER JOIN LibraryTypeEdition edition ON type.LibraryTypeEditionID = edition.LibraryTypeEditionID
        INNER JOIN LibraryTypeEditor editor ON type.LibraryTypeEditorID = editor.LibraryTypeEditorID
        INNER JOIN LibraryTypeFormat format ON type.LibraryTypeFormatID = format.LibraryTypeFormatID
        INNER JOIN LibraryTypeLanguage language ON type.LibraryTypeLanguageID = language.LibraryTypeLanguageID
        INNER JOIN LibraryTypeCategory category ON type.LibraryTypeCategoryID = category.LibraryTypeCategoryID
        INNER JOIN LibraryTypeCopyright copyright ON type.LibraryTypeCopyrightID = copyright.LibraryTypeCopyrightID
        INNER JOIN LibraryTypeStatus status ON type.LibraryTypeStatusID = status.LibraryTypeStatusID
        INNER JOIN LibraryTypeAuthor author ON type.LibraryTypeAuthorID = author.LibraryTypeAuthorID
        WHERE LOWER(type.LibraryTypeTitle) LIKE '%' || p_title || '%';
END;
/
-- Stored Procedure for Get Type By ID --
CREATE OR REPLACE PROCEDURE GetLibraryTypeByID (p_typeId in NUMBER, p_result OUT SYS_REFCURSOR )
AS
BEGIN
    OPEN p_result FOR
        SELECT LibraryTypeID,
            LibraryTypeTitle,
            LibraryTypeSKU,
            LibraryTypeAuthorID,
            LibraryTypePrice,
            LibraryTypePublishDate,
            LibraryTypeISBNCode,
            LibraryTypePublisherID,
            LibraryTypeEditionID,
            LibraryTypeEditorID,
            LibraryTypeFormatID,
            LibraryTypeLanguageID,
            LibraryTypeCategoryID,
            LibraryTypeCopyrightID,
            LibraryTypeQuantity,
            LibraryTypeQuantityBroken,
            LibraryTypeStatusID
        FROM LibraryType
        WHERE LibraryTypeID = p_typeId;
END;
/
-- Stored Procedure for Search By Keyword --
CREATE OR REPLACE PROCEDURE SearchLibraryTypeByKeyword (p_keyword in NVARCHAR2, p_result OUT SYS_REFCURSOR )
AS
BEGIN
    OPEN p_result FOR
        SELECT type.LibraryTypeTitle,
            type.LibraryTypeSKU,
            type.LibraryTypeISBNCode,
            type.LibraryTypePrice,
            SUM(type.LibraryTypeQuantity) AS LibraryTypeQuantity,
            SUM(type.LibraryTypeQuantityBroken) AS LibraryTypeQuantityBroken,
            CASE
                WHEN SUM(type.LibraryTypeQuantity) = SUM(type.LibraryTypeQuantityBroken) THEN 'Out of stock'
                WHEN SUM(type.LibraryTypeQuantity) - SUM(type.LibraryTypeQuantityBroken) < 10 THEN 'Warning'
                WHEN SUM(type.LibraryTypeQuantityBroken) = 0 THEN 'Good'
                ELSE 'Available'
            END AS LibraryTypeCondition,
            SUM(type.LibraryTypePrice) * type.LibraryTypeQuantity AS TotalPrice,
            SUM(type.LibraryTypePrice) * type.LibraryTypeQuantityBroken AS TotalLoss
        FROM LibraryType type
        INNER JOIN LibraryTypePublisher publisher ON type.LibraryTypePublisherID = publisher.LibraryTypePublisherID
        INNER JOIN LibraryTypeEdition edition ON type.LibraryTypeEditionID = edition.LibraryTypeEditionID
        INNER JOIN LibraryTypeEditor editor ON type.LibraryTypeEditorID = editor.LibraryTypeEditorID
        INNER JOIN LibraryTypeFormat format ON type.LibraryTypeFormatID = format.LibraryTypeFormatID
        INNER JOIN LibraryTypeLanguage language ON type.LibraryTypeLanguageID = language.LibraryTypeLanguageID
        INNER JOIN LibraryTypeCategory category ON type.LibraryTypeCategoryID = category.LibraryTypeCategoryID
        INNER JOIN LibraryTypeCopyright copyright ON type.LibraryTypeCopyrightID = copyright.LibraryTypeCopyrightID
        INNER JOIN LibraryTypeStatus status ON type.LibraryTypeStatusID = status.LibraryTypeStatusID
        INNER JOIN LibraryTypeAuthor author ON type.LibraryTypeAuthorID = author.LibraryTypeAuthorID
        WHERE (LOWER(type.LibraryTypeTitle) LIKE '%' || p_keyword || '%' OR
                LOWER(author.LibraryTypeAuthorName) LIKE '%' || p_keyword || '%' OR
                LOWER(publisher.LibraryTypePublisherName) LIKE '%' || p_keyword || '%' OR
                LOWER(editor.LibraryTypeEditorName) LIKE '%' || p_keyword || '%' OR
                LOWER(format.LibraryTypeFormatType) LIKE '%' || p_keyword || '%' OR
                LOWER(language.LibraryTypeLanguageShortCode) LIKE '%' || p_keyword || '%' OR
                LOWER(category.LibraryTypeCategoryName) LIKE '%' || p_keyword || '%' OR
                LOWER(copyright.LibraryTypeCopyrightName) LIKE '%' || p_keyword || '%')
            AND type.LibraryTypeStatusID = 1
        GROUP BY type.LibraryTypeTitle,
            type.LibraryTypeSKU,
            type.LibraryTypePrice,
            type.LibraryTypeISBNCode,
            type.LibraryTypeQuantity,
            type.LibraryTypeQuantityBroken;
END;
/
-- Stored Procedure for Import Data From CSV --
CREATE OR REPLACE PROCEDURE ImportDataFromCSV (
typeTitle IN NVARCHAR2,
typeSKU IN NVARCHAR2,
typePrice IN NUMBER,
typePublishDate DATE,
typeISBNCode IN NVARCHAR2,
typeQuantity IN NUMBER,
typeQuantityBroken IN NUMBER,
publisherName IN NVARCHAR2,
publisherLocation IN NVARCHAR2,
editionNumber IN NVARCHAR2,
editionDate IN DATE,
editorName IN NVARCHAR2,
editorEmail IN NVARCHAR2,
editorLocation IN NVARCHAR2,
formatType IN NVARCHAR2,
languageShortCode IN NVARCHAR2,
languageLongCode IN NVARCHAR2,
categoryName IN NVARCHAR2,
copyrightName IN NVARCHAR2,
authorName IN NVARCHAR2,
authorEmail IN NVARCHAR2,
p_resultNumber OUT NUMBER,
p_result OUT NVARCHAR2)
AS
TypeID NUMBER;
PublisherID NUMBER;
EditionID NUMBER;
EditorID NUMBER;
FormatID NUMBER;
LanguageID NUMBER;
CategoryID NUMBER;
CopyrightID NUMBER;
AuthorID NUMBER;
BEGIN
    BEGIN
        -- Check Publisher --
        BEGIN
            SELECT LibraryTypePublisherID
            INTO PublisherID
            FROM LibraryTypePublisher
            WHERE LOWER(LibraryTypePublisherName) = LOWER(publisherName);
            
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            PublisherID := 0;
        END;
        
        IF (PublisherID = 0)
        THEN
            INSERT INTO LibraryTypePublisher (LibraryTypePublisherName, LibraryTypePublisherLocation) VALUES (publisherName, publisherLocation)
            RETURNING LibraryTypePublisherID INTO PublisherID;
        END IF;
        
        -- Check Edition --
        BEGIN
            SELECT LibraryTypeEditionID
            INTO EditionID
            FROM LibraryTypeEdition
            WHERE LOWER(LibraryTypeEditionNumber) = LOWER(editionNumber)
                AND LibraryTypeEditionDate = editionDate;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            EditionID := 0;
        END;
        
        IF (EditionID = 0)
        THEN
            INSERT INTO LibraryTypeEdition (LibraryTypeEditionNumber, LibraryTypeEditionDate) VALUES (editionNumber, editionDate)
            RETURNING LibraryTypeEditionID INTO EditionID;
        END IF;
        
        -- Check Editor --
        BEGIN
            SELECT LibraryTypeEditorID
            INTO EditorID
            FROM LibraryTypeEditor
            WHERE LOWER(LibraryTypeEditorName) = LOWER(editorName)
                AND LOWER(LibraryTypeEditorEmail) = LOWER(editorEmail)
                AND LOWER(LibraryTypeEditorLocation) = LOWER(editorLocation);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            EditorID := 0;
        END;
        
        IF (EditorID = 0)
        THEN
            INSERT INTO LibraryTypeEditor (LibraryTypeEditorName, LibraryTypeEditorEmail, LibraryTypeEditorLocation) VALUES (editorName, editorEmail, editorLocation)
            RETURNING LibraryTypeEditorID INTO EditorID;
        END IF;
        
        -- Check Format --
        BEGIN
            SELECT LibraryTypeFormatID
            INTO FormatID
            FROM LibraryTypeFormat
            WHERE LOWER(LibraryTypeFormatType) = LOWER(formatType);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            FormatID := 0;
        END;
        
        IF (FormatID = 0)
        THEN
            INSERT INTO LibraryTypeFormat (LibraryTypeFormatType) VALUES (formatType)
            RETURNING LibraryTypeFormatID INTO FormatID;
        END IF;
        
        -- Check Language --
        BEGIN
            SELECT LibraryTypeLanguageID
            INTO LanguageID
            FROM LibraryTypeLanguage
            WHERE LOWER(LibraryTypeLanguageShortCode) = LOWER(languageShortCode);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LanguageID := 0;
        END;
        
        IF (LanguageID = 0)
        THEN
            INSERT INTO LibraryTypeLanguage (LibraryTypeLanguageShortCode, LibraryTypeLanguageLongCode) VALUES (languageShortCode, languageLongCode)
            RETURNING LibraryTypeLanguageID INTO LanguageID;
        END IF;
        
        -- Check Category --
        BEGIN
            SELECT LibraryTypeCategoryID
            INTO CategoryID
            FROM LibraryTypeCategory
            WHERE LOWER(LibraryTypeCategoryName) = LOWER(categoryName);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            CategoryID := 0;
        END;
        
        IF (CategoryID = 0)
        THEN
            INSERT INTO LibraryTypeCategory (LibraryTypeCategoryName) VALUES (categoryName)
            RETURNING LibraryTypeCategoryID INTO CategoryID;
        END IF;
        
        -- Check Copyright --
        BEGIN
            SELECT LibraryTypeCopyrightID
            INTO CopyrightID
            FROM LibraryTypeCopyright
            WHERE LOWER(LibraryTypeCopyrightName) = LOWER(copyrightName);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            CopyrightID := 0;
        END;
        
        IF (CopyrightID = 0)
        THEN
            INSERT INTO LibraryTypeCopyright (LibraryTypeCopyrightName) VALUES (copyrightName)
            RETURNING LibraryTypeCopyrightID INTO CopyrightID;
        END IF;
        
        -- Check Author --
        BEGIN
            SELECT LibraryTypeAuthorID
            INTO AuthorID
            FROM LibraryTypeAuthor
            WHERE LOWER(LibraryTypeAuthorName) = LOWER(authorName)
                AND LOWER(LibraryTypeAuthorEmail) = LOWER(authorEmail);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            AuthorID := 0;
        END;
        
        IF (AuthorID = 0)
        THEN
            INSERT INTO LibraryTypeAuthor (LibraryTypeAuthorName, LibraryTypeAuthorEmail) VALUES (authorName, authorEmail)
            RETURNING LibraryTypeAuthorID INTO AuthorID;
        END IF;
        
        -- Check Type --
        BEGIN
            SELECT LibraryTypeID
            INTO TypeID
            FROM LibraryType
            WHERE LOWER(LibraryTypeTitle) = LOWER(typeTitle)
                AND LOWER(LibraryTypeISBNCode) = LOWER(typeISBNCode)
                AND LibraryTypePublisherID = PublisherID
                AND LibraryTypeEditionID = EditionID
                AND LibraryTypeLanguageID = LanguageID
                AND LibraryTypeFormatID = FormatID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            TypeID := 0;
        END;
        
        IF (TypeID = 0)
        THEN
            INSERT INTO LibraryType (
                LibraryTypeTitle, 
                LibraryTypeSKU, 
                LibraryTypeAuthorID,
                LibraryTypePrice,
                LibraryTypePublishDate,
                LibraryTypeISBNCode,
                LibraryTypePublisherID,
                LibraryTypeEditionID,
                LibraryTypeEditorID,
                LibraryTypeFormatID,
                LibraryTypeLanguageID,
                LibraryTypeCategoryID,
                LibraryTypeCopyrightID,
                LibraryTypeQuantity,
                LibraryTypeQuantityBroken) VALUES (
                typeTitle, typeSKU, AuthorID, typePrice, typePublishDate,
                typeISBNCode, PublisherID, EditionID, EditorID, FormatID,
                LanguageID, CategoryID, CopyrightID, typeQuantity, typeQuantityBroken)
            RETURNING LibraryTypeID INTO TypeID;
        ELSE
            UPDATE LibraryType SET 
                LibraryTypeTitle = typeTitle, 
                LibraryTypeSKU = typeSKU, 
                LibraryTypeAuthorID = AuthorID,
                LibraryTypePrice = typePrice,
                LibraryTypePublishDate = typePublishDate,
                LibraryTypeISBNCode = typeISBNCode,
                LibraryTypePublisherID = PublisherID,
                LibraryTypeEditionID = EditionID,
                LibraryTypeEditorID = EditorID,
                LibraryTypeFormatID = FormatID,
                LibraryTypeLanguageID = LanguageID,
                LibraryTypeCategoryID = CategoryID,
                LibraryTypeCopyrightID = CopyrightID,
                LibraryTypeQuantity = typeQuantity,
                LibraryTypeQuantityBroken = typeQuantityBroken
            WHERE LibraryTypeID = TypeID;
        END IF;
        
        p_resultNumber := 1;
        p_result := 'SUCCESS';
        
    EXCEPTION
        WHEN OTHERS THEN
        p_resultNumber := 0;
        p_result := 'Error: Code: ' || SQLCODE || ' | Message: ' || SQLERRM;
    END;
END;
